#include <Wire.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>
#include <HardwareSerial.h>
#include <HTTPClient.h>
#include <WiFiManager.h>

// === Blynk Credentials ===
const char auth[] = "-CQhIoPCwlCm5BlSWvVLwzbVjqFL9wfi";

// === Telegram Bot Credentials ===
const char* botToken = "7250539393:AAEARzzl7zhyEdJ7UCqRuXogHEL6hd2r2PA";
const char* chatID = "-4660899726";

// === Alert Thresholds ===
float tempThreshold = 40.0;
float humidityThreshold = 60.0;
int pm25Threshold = 50;

// === GPIO Configuration ===
#define DHTPIN       15
#define DHTTYPE      DHT22
#define PMS_RX       16
#define PMS_TX       17

DHT dht(DHTPIN, DHTTYPE);
HardwareSerial pmsSerial(2);
BlynkTimer timer;
WiFiClientSecure client;
HTTPClient http;
WiFiManager wifiManager;

void setup() {
    Serial.begin(115200);
    dht.begin();
    pmsSerial.begin(9600, SERIAL_8N1, PMS_RX, PMS_TX);
    
    wifiManager.autoConnect("ESP32-Setup");
    Serial.println("‚úÖ Wi-Fi Connected!");

    Blynk.begin(auth, WiFi.SSID().c_str(), WiFi.psk().c_str(), "elec.cmtc.ac.th", 8080);
    Serial.println("‚úÖ Blynk Connected!");

    timer.setInterval(2000L, readSensors);
}

void loop() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ö†Ô∏è Wi-Fi Disconnected! Reconnecting...");
        wifiManager.autoConnect("ESP32-Setup");
    }
    if (!Blynk.connected()) {
        Serial.println("‚ö†Ô∏è Reconnecting to Blynk...");
        Blynk.begin(auth, WiFi.SSID().c_str(), WiFi.psk().c_str(), "elec.cmtc.ac.th", 8080);
    }
    Blynk.run();
    timer.run();
}

void readSensors() {
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int pm2_5 = readPM25();

    if (!isnan(temperature) && !isnan(humidity)) {
        Serial.printf("üå° Temp: %.2f¬∞C | üíß Humidity: %.2f%% | ü´ß PM2.5: %d ¬µg/m¬≥\n", temperature, humidity, pm2_5);
        Blynk.virtualWrite(V1, temperature);
        Blynk.virtualWrite(V2, humidity);
        Blynk.virtualWrite(V3, pm2_5);

        if (temperature > tempThreshold) sendTelegramMessage("üî• Temp high: " + String(temperature) + "¬∞C");
        if (humidity > humidityThreshold) sendTelegramMessage("üíß Humidity high: " + String(humidity) + "%");
        if (pm2_5 > pm25Threshold) sendTelegramMessage("‚ö†Ô∏è PM2.5 High: " + String(pm2_5) + " ¬µg/m¬≥");
    } else {
        Serial.println("‚ùå Sensor Read Error!");
    }
}

int readPM25() {
    Serial.println("üì° Reading PM2.5 data...");
    while (pmsSerial.available()) pmsSerial.read();
    delay(300);

    if (pmsSerial.available() >= 32) {
        uint8_t buffer[32];
        pmsSerial.readBytes(buffer, 32);

        Serial.print("üîç Raw Data: ");
        for (int i = 0; i < 32; i++) {
            Serial.printf("%02X ", buffer[i]);
        }
        Serial.println();

        if (buffer[0] == 0x42 && buffer[1] == 0x4D) {
            uint16_t checksum = (buffer[30] << 8) | buffer[31];
            uint16_t sum = 0;
            for (int i = 0; i < 30; i++) sum += buffer[i];

            if (sum == checksum) {
                int pm25 = (buffer[12] << 8) | buffer[13];
                Serial.printf("‚úÖ PM2.5 Value: %d ¬µg/m¬≥\n", pm25);
                return pm25;
            } else {
                Serial.println("‚ùå PM2.5 Checksum Error!");
            }
        } else {
            Serial.println("‚ùå PM2.5 Header Error!");
        }
    } else {
        Serial.println("‚ö†Ô∏è Not enough PM2.5 data available!");
    }
    return 0;
}

void sendTelegramMessage(String message) {
    client.setInsecure();
    String url = "https://api.telegram.org/bot" + String(botToken) + "/sendMessage?chat_id=" + String(chatID) + "&text=" + urlencode(message);
    http.begin(client, url);
    int httpResponseCode = http.GET();
    
    Serial.print("üì° Telegram Response Code: ");
    Serial.println(httpResponseCode);
    
    if (httpResponseCode > 0) {
        Serial.println("‚úÖ Message sent to Telegram successfully!");
    } else {
        Serial.println("‚ùå Failed to send message to Telegram!");
    }
    http.end();
}

String urlencode(String str) {
    String encodedString = "";
    char c;
    for (int i = 0; i < str.length(); i++) {
        c = str.charAt(i);
        if (isalnum(c)) {
            encodedString += c;
        } else {
            char code0 = ((c >> 4) & 0xF) + '0';
            char code1 = (c & 0xF) + '0';
            if (code0 > '9') code0 += 7;
            if (code1 > '9') code1 += 7;
            encodedString += '%';
            encodedString += code0;
            encodedString += code1;
        }
    }
    return encodedString;
}
